author = The PyroFractal Team
type = HISTOGRAM
description = yet another test histogram

on_end_iteration = [Event("calcHistogramIndex"), Event("addToHistogram")]

[PYRO_PARAMETERS]
# The render size is determined by the number of subhistograms we have, and how big each subhistogram is.
# The images is subhist_x * n pixels wide and subhist_y * n pixels wide.
image_width  = pyro_param_integer(1024)
image_height = pyro_param_integer(1024)

# calcuHistogramIndex calculates the histogram index based on the zin value
# the result is added to an array that is used in the second stage
# 
# This first stage has a work size equal to the main render's work size.
[calcHistogramIndex]
zin = Buffer(Global.PyroXY)
colour = Buffer(Global.PyroRGB)

# image dimension data
minxy = numpy.complex64(numpy.float32(-1.0), numpy.float32( - Params.image_height / Params.image_width))
maxxy = numpy.complex64(numpy.float32(1.0), numpy.float32(Params.image_height / Params.image_width))
pixel_per_unit = numpy.float32( numpy.float32(Params.image_width) / 2.0)
image_width = Params.image_width 

# Array used to store colour data with calculated index of results
histogram_cache = Array(Package.HistogramCache, Const.buffer_size)

# addToHistogram updates the histogram buffer with the cached histogram data
#
# This second stage has a work size in one dimension the same as the main render,
# plus Render.width in a second dimension
# Each work unit is responsible for updating the histogram for data from 
# histogram_cache[global_id(0)] that map to a unique image_y column of pixels in a local work group 
# ie. each work unit checks if it's histogram_cache fits into a verical strip of the histogram image.
# On my machine, the maximum workgroup size is 512 which means with __LOCAL_WORK_SIZE__ = (512,1)
# there are not enough compute units to run two workgroups simultaneously. 
# Therefore no two histogram indexes will be updated at the same time.
# This needs further work, as:
#   1. __LOCAL_WORK_SIZE__ should be set to (cl.device_info.MAX_WORK_GROUP_SIZE, 1 )
#   2. the minimum image_x should be cl.device_info.MAX_WORK_GROUP_SIZE
[addToHistogram]
__GLOBAL_WORK_SIZE__ = (Const.buffer_size, Render.width )
__LOCAL_WORK_SIZE__ = (512,1)
histogram_cache = Array(Package.HistogramCache, Const.buffer_size)
histogram = Array(Global.PyroHistogramRGB, Params.image_width * Params.image_height)
image_width = Params.image_width

