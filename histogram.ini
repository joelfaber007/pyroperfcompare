author = The PyroFractal Team
type = HISTOGRAM
description = yet another test histogram. Test git update

on_end_iteration = [Event("calcHistogramIndexJFOrig"), Event("addToHistogramJFOrig")]

[PYRO_PARAMETERS]
# The render size is determined by the number of subhistograms we have, and how big each subhistogram is.
# The images is subhist_x * n pixels wide and subhist_y * n pixels wide.
image_width  = pyro_param_integer(1024)
image_height = pyro_param_integer(1024)

# calcuHistogramIndex calculates the histogram index based on the zin value
# the result is added to an array that is used in the second stage
# 
# This first stage has a work size equal to the main render's work size.
[calcHistogramIndexJFOrig]
zin = Buffer(Global.PyroXY)
colour = Buffer(Global.PyroRGB)

# image dimension data
minxy = numpy.complex64(numpy.float32(-1.0), numpy.float32( - Params.image_height / Params.image_width))
maxxy = numpy.complex64(numpy.float32(1.0), numpy.float32(Params.image_height / Params.image_width))
pixel_per_unit = numpy.float32( numpy.float32(Params.image_width) / 2.0)
image_width = Params.image_width 

# Array used to store colour data with calculated index of results
histogram_cache = Array(Package.HistogramCache, Const.buffer_size)

# addToHistogram updates the histogram buffer with the cached histogram data
[addToHistogramJFOrig]
__GLOBAL_WORK_SIZE__ = (Params.image_width, )
__LOCAL_WORK_SIZE__ = (512,1)
histogram_cache = Array(Package.HistogramCache, Const.buffer_size)
histogram = Array(Global.PyroHistogramRGB, Params.image_width * Params.image_height)
buffer_size = Const.buffer_size

